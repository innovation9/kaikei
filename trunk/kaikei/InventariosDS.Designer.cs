//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.4927
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Kaikei {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InventariosDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InventariosDS : global::System.Data.DataSet {
        
        private INVENTARIO_CARDEXDataTable tableINVENTARIO_CARDEX;
        
        private INVENTARIO_DISPONIBLEDataTable tableINVENTARIO_DISPONIBLE;
        
        private COMPRASDataTable tableCOMPRAS;
        
        private DETALLE_COMPRADataTable tableDETALLE_COMPRA;
        
        private PROVEEDORESDataTable tablePROVEEDORES;
        
        private MATERIALESDataTable tableMATERIALES;
        
        private MATERIALES_UNIDADESDataTable tableMATERIALES_UNIDADES;
        
        private ONLY_MATERIAL_DISPONIBLEDataTable tableONLY_MATERIAL_DISPONIBLE;
        
        private global::System.Data.DataRelation relationFK_COMPRAS_FK_PROVEE_PROVEEDO;
        
        private global::System.Data.DataRelation relationFK_DETALLE__FK_COMPRA_COMPRAS;
        
        private global::System.Data.DataRelation relationFK_DETALLE__FK_COMPRA_MATERIAL;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InventariosDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InventariosDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["INVENTARIO_CARDEX"] != null)) {
                    base.Tables.Add(new INVENTARIO_CARDEXDataTable(ds.Tables["INVENTARIO_CARDEX"]));
                }
                if ((ds.Tables["INVENTARIO_DISPONIBLE"] != null)) {
                    base.Tables.Add(new INVENTARIO_DISPONIBLEDataTable(ds.Tables["INVENTARIO_DISPONIBLE"]));
                }
                if ((ds.Tables["COMPRAS"] != null)) {
                    base.Tables.Add(new COMPRASDataTable(ds.Tables["COMPRAS"]));
                }
                if ((ds.Tables["DETALLE_COMPRA"] != null)) {
                    base.Tables.Add(new DETALLE_COMPRADataTable(ds.Tables["DETALLE_COMPRA"]));
                }
                if ((ds.Tables["PROVEEDORES"] != null)) {
                    base.Tables.Add(new PROVEEDORESDataTable(ds.Tables["PROVEEDORES"]));
                }
                if ((ds.Tables["MATERIALES"] != null)) {
                    base.Tables.Add(new MATERIALESDataTable(ds.Tables["MATERIALES"]));
                }
                if ((ds.Tables["MATERIALES_UNIDADES"] != null)) {
                    base.Tables.Add(new MATERIALES_UNIDADESDataTable(ds.Tables["MATERIALES_UNIDADES"]));
                }
                if ((ds.Tables["ONLY_MATERIAL_DISPONIBLE"] != null)) {
                    base.Tables.Add(new ONLY_MATERIAL_DISPONIBLEDataTable(ds.Tables["ONLY_MATERIAL_DISPONIBLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INVENTARIO_CARDEXDataTable INVENTARIO_CARDEX {
            get {
                return this.tableINVENTARIO_CARDEX;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INVENTARIO_DISPONIBLEDataTable INVENTARIO_DISPONIBLE {
            get {
                return this.tableINVENTARIO_DISPONIBLE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPRASDataTable COMPRAS {
            get {
                return this.tableCOMPRAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DETALLE_COMPRADataTable DETALLE_COMPRA {
            get {
                return this.tableDETALLE_COMPRA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROVEEDORESDataTable PROVEEDORES {
            get {
                return this.tablePROVEEDORES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MATERIALESDataTable MATERIALES {
            get {
                return this.tableMATERIALES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MATERIALES_UNIDADESDataTable MATERIALES_UNIDADES {
            get {
                return this.tableMATERIALES_UNIDADES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ONLY_MATERIAL_DISPONIBLEDataTable ONLY_MATERIAL_DISPONIBLE {
            get {
                return this.tableONLY_MATERIAL_DISPONIBLE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InventariosDS cln = ((InventariosDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["INVENTARIO_CARDEX"] != null)) {
                    base.Tables.Add(new INVENTARIO_CARDEXDataTable(ds.Tables["INVENTARIO_CARDEX"]));
                }
                if ((ds.Tables["INVENTARIO_DISPONIBLE"] != null)) {
                    base.Tables.Add(new INVENTARIO_DISPONIBLEDataTable(ds.Tables["INVENTARIO_DISPONIBLE"]));
                }
                if ((ds.Tables["COMPRAS"] != null)) {
                    base.Tables.Add(new COMPRASDataTable(ds.Tables["COMPRAS"]));
                }
                if ((ds.Tables["DETALLE_COMPRA"] != null)) {
                    base.Tables.Add(new DETALLE_COMPRADataTable(ds.Tables["DETALLE_COMPRA"]));
                }
                if ((ds.Tables["PROVEEDORES"] != null)) {
                    base.Tables.Add(new PROVEEDORESDataTable(ds.Tables["PROVEEDORES"]));
                }
                if ((ds.Tables["MATERIALES"] != null)) {
                    base.Tables.Add(new MATERIALESDataTable(ds.Tables["MATERIALES"]));
                }
                if ((ds.Tables["MATERIALES_UNIDADES"] != null)) {
                    base.Tables.Add(new MATERIALES_UNIDADESDataTable(ds.Tables["MATERIALES_UNIDADES"]));
                }
                if ((ds.Tables["ONLY_MATERIAL_DISPONIBLE"] != null)) {
                    base.Tables.Add(new ONLY_MATERIAL_DISPONIBLEDataTable(ds.Tables["ONLY_MATERIAL_DISPONIBLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableINVENTARIO_CARDEX = ((INVENTARIO_CARDEXDataTable)(base.Tables["INVENTARIO_CARDEX"]));
            if ((initTable == true)) {
                if ((this.tableINVENTARIO_CARDEX != null)) {
                    this.tableINVENTARIO_CARDEX.InitVars();
                }
            }
            this.tableINVENTARIO_DISPONIBLE = ((INVENTARIO_DISPONIBLEDataTable)(base.Tables["INVENTARIO_DISPONIBLE"]));
            if ((initTable == true)) {
                if ((this.tableINVENTARIO_DISPONIBLE != null)) {
                    this.tableINVENTARIO_DISPONIBLE.InitVars();
                }
            }
            this.tableCOMPRAS = ((COMPRASDataTable)(base.Tables["COMPRAS"]));
            if ((initTable == true)) {
                if ((this.tableCOMPRAS != null)) {
                    this.tableCOMPRAS.InitVars();
                }
            }
            this.tableDETALLE_COMPRA = ((DETALLE_COMPRADataTable)(base.Tables["DETALLE_COMPRA"]));
            if ((initTable == true)) {
                if ((this.tableDETALLE_COMPRA != null)) {
                    this.tableDETALLE_COMPRA.InitVars();
                }
            }
            this.tablePROVEEDORES = ((PROVEEDORESDataTable)(base.Tables["PROVEEDORES"]));
            if ((initTable == true)) {
                if ((this.tablePROVEEDORES != null)) {
                    this.tablePROVEEDORES.InitVars();
                }
            }
            this.tableMATERIALES = ((MATERIALESDataTable)(base.Tables["MATERIALES"]));
            if ((initTable == true)) {
                if ((this.tableMATERIALES != null)) {
                    this.tableMATERIALES.InitVars();
                }
            }
            this.tableMATERIALES_UNIDADES = ((MATERIALES_UNIDADESDataTable)(base.Tables["MATERIALES_UNIDADES"]));
            if ((initTable == true)) {
                if ((this.tableMATERIALES_UNIDADES != null)) {
                    this.tableMATERIALES_UNIDADES.InitVars();
                }
            }
            this.tableONLY_MATERIAL_DISPONIBLE = ((ONLY_MATERIAL_DISPONIBLEDataTable)(base.Tables["ONLY_MATERIAL_DISPONIBLE"]));
            if ((initTable == true)) {
                if ((this.tableONLY_MATERIAL_DISPONIBLE != null)) {
                    this.tableONLY_MATERIAL_DISPONIBLE.InitVars();
                }
            }
            this.relationFK_COMPRAS_FK_PROVEE_PROVEEDO = this.Relations["FK_COMPRAS_FK_PROVEE_PROVEEDO"];
            this.relationFK_DETALLE__FK_COMPRA_COMPRAS = this.Relations["FK_DETALLE__FK_COMPRA_COMPRAS"];
            this.relationFK_DETALLE__FK_COMPRA_MATERIAL = this.Relations["FK_DETALLE__FK_COMPRA_MATERIAL"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InventariosDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InventariosDS.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableINVENTARIO_CARDEX = new INVENTARIO_CARDEXDataTable();
            base.Tables.Add(this.tableINVENTARIO_CARDEX);
            this.tableINVENTARIO_DISPONIBLE = new INVENTARIO_DISPONIBLEDataTable();
            base.Tables.Add(this.tableINVENTARIO_DISPONIBLE);
            this.tableCOMPRAS = new COMPRASDataTable();
            base.Tables.Add(this.tableCOMPRAS);
            this.tableDETALLE_COMPRA = new DETALLE_COMPRADataTable();
            base.Tables.Add(this.tableDETALLE_COMPRA);
            this.tablePROVEEDORES = new PROVEEDORESDataTable();
            base.Tables.Add(this.tablePROVEEDORES);
            this.tableMATERIALES = new MATERIALESDataTable();
            base.Tables.Add(this.tableMATERIALES);
            this.tableMATERIALES_UNIDADES = new MATERIALES_UNIDADESDataTable();
            base.Tables.Add(this.tableMATERIALES_UNIDADES);
            this.tableONLY_MATERIAL_DISPONIBLE = new ONLY_MATERIAL_DISPONIBLEDataTable();
            base.Tables.Add(this.tableONLY_MATERIAL_DISPONIBLE);
            this.relationFK_COMPRAS_FK_PROVEE_PROVEEDO = new global::System.Data.DataRelation("FK_COMPRAS_FK_PROVEE_PROVEEDO", new global::System.Data.DataColumn[] {
                        this.tablePROVEEDORES.ID_PROVEEDORColumn}, new global::System.Data.DataColumn[] {
                        this.tableCOMPRAS.ID_PROVEEDORColumn}, false);
            this.Relations.Add(this.relationFK_COMPRAS_FK_PROVEE_PROVEEDO);
            this.relationFK_DETALLE__FK_COMPRA_COMPRAS = new global::System.Data.DataRelation("FK_DETALLE__FK_COMPRA_COMPRAS", new global::System.Data.DataColumn[] {
                        this.tableCOMPRAS.ID_COMPRAColumn}, new global::System.Data.DataColumn[] {
                        this.tableDETALLE_COMPRA.ID_COMPRAColumn}, false);
            this.Relations.Add(this.relationFK_DETALLE__FK_COMPRA_COMPRAS);
            this.relationFK_DETALLE__FK_COMPRA_MATERIAL = new global::System.Data.DataRelation("FK_DETALLE__FK_COMPRA_MATERIAL", new global::System.Data.DataColumn[] {
                        this.tableMATERIALES.ID_MATERIALColumn}, new global::System.Data.DataColumn[] {
                        this.tableDETALLE_COMPRA.ID_MATERIALColumn}, false);
            this.Relations.Add(this.relationFK_DETALLE__FK_COMPRA_MATERIAL);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINVENTARIO_CARDEX() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINVENTARIO_DISPONIBLE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPRAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDETALLE_COMPRA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROVEEDORES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMATERIALES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMATERIALES_UNIDADES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeONLY_MATERIAL_DISPONIBLE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InventariosDS ds = new InventariosDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void INVENTARIO_CARDEXRowChangeEventHandler(object sender, INVENTARIO_CARDEXRowChangeEvent e);
        
        public delegate void INVENTARIO_DISPONIBLERowChangeEventHandler(object sender, INVENTARIO_DISPONIBLERowChangeEvent e);
        
        public delegate void COMPRASRowChangeEventHandler(object sender, COMPRASRowChangeEvent e);
        
        public delegate void DETALLE_COMPRARowChangeEventHandler(object sender, DETALLE_COMPRARowChangeEvent e);
        
        public delegate void PROVEEDORESRowChangeEventHandler(object sender, PROVEEDORESRowChangeEvent e);
        
        public delegate void MATERIALESRowChangeEventHandler(object sender, MATERIALESRowChangeEvent e);
        
        public delegate void MATERIALES_UNIDADESRowChangeEventHandler(object sender, MATERIALES_UNIDADESRowChangeEvent e);
        
        public delegate void ONLY_MATERIAL_DISPONIBLERowChangeEventHandler(object sender, ONLY_MATERIAL_DISPONIBLERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INVENTARIO_CARDEXDataTable : global::System.Data.TypedTableBase<INVENTARIO_CARDEXRow> {
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnFECHA;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            private global::System.Data.DataColumn columnCOMPRAS;
            
            private global::System.Data.DataColumn columnVENTAS;
            
            private global::System.Data.DataColumn columnDIFERENCIA;
            
            private global::System.Data.DataColumn columnPRECIOUNITARIO;
            
            private global::System.Data.DataColumn columnDISPONIBILIDAD;
            
            private global::System.Data.DataColumn columnPROVEEDOR;
            
            private global::System.Data.DataColumn columnCOMPRASUNIDAD;
            
            private global::System.Data.DataColumn columnVENTASUNIDAD;
            
            private global::System.Data.DataColumn columnTOTALUNIDAD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXDataTable() {
                this.TableName = "INVENTARIO_CARDEX";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INVENTARIO_CARDEXDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INVENTARIO_CARDEXDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FECHAColumn {
                get {
                    return this.columnFECHA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPRASColumn {
                get {
                    return this.columnCOMPRAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENTASColumn {
                get {
                    return this.columnVENTAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIFERENCIAColumn {
                get {
                    return this.columnDIFERENCIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRECIOUNITARIOColumn {
                get {
                    return this.columnPRECIOUNITARIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISPONIBILIDADColumn {
                get {
                    return this.columnDISPONIBILIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROVEEDORColumn {
                get {
                    return this.columnPROVEEDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPRASUNIDADColumn {
                get {
                    return this.columnCOMPRASUNIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENTASUNIDADColumn {
                get {
                    return this.columnVENTASUNIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALUNIDADColumn {
                get {
                    return this.columnTOTALUNIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRow this[int index] {
                get {
                    return ((INVENTARIO_CARDEXRow)(this.Rows[index]));
                }
            }
            
            public event INVENTARIO_CARDEXRowChangeEventHandler INVENTARIO_CARDEXRowChanging;
            
            public event INVENTARIO_CARDEXRowChangeEventHandler INVENTARIO_CARDEXRowChanged;
            
            public event INVENTARIO_CARDEXRowChangeEventHandler INVENTARIO_CARDEXRowDeleting;
            
            public event INVENTARIO_CARDEXRowChangeEventHandler INVENTARIO_CARDEXRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINVENTARIO_CARDEXRow(INVENTARIO_CARDEXRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRow AddINVENTARIO_CARDEXRow(int ID_MATERIAL, System.DateTime FECHA, string NOMBRE, int COMPRAS, int VENTAS, int DIFERENCIA, decimal PRECIOUNITARIO, string DISPONIBILIDAD, string PROVEEDOR, string COMPRASUNIDAD, string VENTASUNIDAD, string TOTALUNIDAD) {
                INVENTARIO_CARDEXRow rowINVENTARIO_CARDEXRow = ((INVENTARIO_CARDEXRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_MATERIAL,
                        FECHA,
                        NOMBRE,
                        COMPRAS,
                        VENTAS,
                        DIFERENCIA,
                        PRECIOUNITARIO,
                        DISPONIBILIDAD,
                        PROVEEDOR,
                        COMPRASUNIDAD,
                        VENTASUNIDAD,
                        TOTALUNIDAD};
                rowINVENTARIO_CARDEXRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINVENTARIO_CARDEXRow);
                return rowINVENTARIO_CARDEXRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRow FindByID_MATERIAL(int ID_MATERIAL) {
                return ((INVENTARIO_CARDEXRow)(this.Rows.Find(new object[] {
                            ID_MATERIAL})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INVENTARIO_CARDEXDataTable cln = ((INVENTARIO_CARDEXDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INVENTARIO_CARDEXDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnFECHA = base.Columns["FECHA"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
                this.columnCOMPRAS = base.Columns["COMPRAS"];
                this.columnVENTAS = base.Columns["VENTAS"];
                this.columnDIFERENCIA = base.Columns["DIFERENCIA"];
                this.columnPRECIOUNITARIO = base.Columns["PRECIOUNITARIO"];
                this.columnDISPONIBILIDAD = base.Columns["DISPONIBILIDAD"];
                this.columnPROVEEDOR = base.Columns["PROVEEDOR"];
                this.columnCOMPRASUNIDAD = base.Columns["COMPRASUNIDAD"];
                this.columnVENTASUNIDAD = base.Columns["VENTASUNIDAD"];
                this.columnTOTALUNIDAD = base.Columns["TOTALUNIDAD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnFECHA = new global::System.Data.DataColumn("FECHA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFECHA);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.columnCOMPRAS = new global::System.Data.DataColumn("COMPRAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPRAS);
                this.columnVENTAS = new global::System.Data.DataColumn("VENTAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENTAS);
                this.columnDIFERENCIA = new global::System.Data.DataColumn("DIFERENCIA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIFERENCIA);
                this.columnPRECIOUNITARIO = new global::System.Data.DataColumn("PRECIOUNITARIO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRECIOUNITARIO);
                this.columnDISPONIBILIDAD = new global::System.Data.DataColumn("DISPONIBILIDAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISPONIBILIDAD);
                this.columnPROVEEDOR = new global::System.Data.DataColumn("PROVEEDOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROVEEDOR);
                this.columnCOMPRASUNIDAD = new global::System.Data.DataColumn("COMPRASUNIDAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPRASUNIDAD);
                this.columnVENTASUNIDAD = new global::System.Data.DataColumn("VENTASUNIDAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENTASUNIDAD);
                this.columnTOTALUNIDAD = new global::System.Data.DataColumn("TOTALUNIDAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALUNIDAD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MATERIAL}, true));
                this.columnID_MATERIAL.AllowDBNull = false;
                this.columnID_MATERIAL.Unique = true;
                this.columnNOMBRE.MaxLength = 25;
                this.columnVENTAS.ReadOnly = true;
                this.columnDIFERENCIA.ReadOnly = true;
                this.columnDISPONIBILIDAD.ReadOnly = true;
                this.columnDISPONIBILIDAD.MaxLength = 1;
                this.columnPROVEEDOR.MaxLength = 25;
                this.columnCOMPRASUNIDAD.MaxLength = 36;
                this.columnVENTASUNIDAD.ReadOnly = true;
                this.columnVENTASUNIDAD.MaxLength = 36;
                this.columnTOTALUNIDAD.ReadOnly = true;
                this.columnTOTALUNIDAD.MaxLength = 36;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRow NewINVENTARIO_CARDEXRow() {
                return ((INVENTARIO_CARDEXRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INVENTARIO_CARDEXRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INVENTARIO_CARDEXRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INVENTARIO_CARDEXRowChanged != null)) {
                    this.INVENTARIO_CARDEXRowChanged(this, new INVENTARIO_CARDEXRowChangeEvent(((INVENTARIO_CARDEXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INVENTARIO_CARDEXRowChanging != null)) {
                    this.INVENTARIO_CARDEXRowChanging(this, new INVENTARIO_CARDEXRowChangeEvent(((INVENTARIO_CARDEXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INVENTARIO_CARDEXRowDeleted != null)) {
                    this.INVENTARIO_CARDEXRowDeleted(this, new INVENTARIO_CARDEXRowChangeEvent(((INVENTARIO_CARDEXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INVENTARIO_CARDEXRowDeleting != null)) {
                    this.INVENTARIO_CARDEXRowDeleting(this, new INVENTARIO_CARDEXRowChangeEvent(((INVENTARIO_CARDEXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINVENTARIO_CARDEXRow(INVENTARIO_CARDEXRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INVENTARIO_CARDEXDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INVENTARIO_DISPONIBLEDataTable : global::System.Data.TypedTableBase<INVENTARIO_DISPONIBLERow> {
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            private global::System.Data.DataColumn columnCOMPRAS;
            
            private global::System.Data.DataColumn columnVENTAS;
            
            private global::System.Data.DataColumn columnDIFERENCIA;
            
            private global::System.Data.DataColumn columnDISPONIBILIDAD;
            
            private global::System.Data.DataColumn columnUNIDADES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLEDataTable() {
                this.TableName = "INVENTARIO_DISPONIBLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INVENTARIO_DISPONIBLEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INVENTARIO_DISPONIBLEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPRASColumn {
                get {
                    return this.columnCOMPRAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENTASColumn {
                get {
                    return this.columnVENTAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIFERENCIAColumn {
                get {
                    return this.columnDIFERENCIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISPONIBILIDADColumn {
                get {
                    return this.columnDISPONIBILIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIDADESColumn {
                get {
                    return this.columnUNIDADES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERow this[int index] {
                get {
                    return ((INVENTARIO_DISPONIBLERow)(this.Rows[index]));
                }
            }
            
            public event INVENTARIO_DISPONIBLERowChangeEventHandler INVENTARIO_DISPONIBLERowChanging;
            
            public event INVENTARIO_DISPONIBLERowChangeEventHandler INVENTARIO_DISPONIBLERowChanged;
            
            public event INVENTARIO_DISPONIBLERowChangeEventHandler INVENTARIO_DISPONIBLERowDeleting;
            
            public event INVENTARIO_DISPONIBLERowChangeEventHandler INVENTARIO_DISPONIBLERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINVENTARIO_DISPONIBLERow(INVENTARIO_DISPONIBLERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERow AddINVENTARIO_DISPONIBLERow(int ID_MATERIAL, string NOMBRE, int COMPRAS, int VENTAS, int DIFERENCIA, int DISPONIBILIDAD, string UNIDADES) {
                INVENTARIO_DISPONIBLERow rowINVENTARIO_DISPONIBLERow = ((INVENTARIO_DISPONIBLERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_MATERIAL,
                        NOMBRE,
                        COMPRAS,
                        VENTAS,
                        DIFERENCIA,
                        DISPONIBILIDAD,
                        UNIDADES};
                rowINVENTARIO_DISPONIBLERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINVENTARIO_DISPONIBLERow);
                return rowINVENTARIO_DISPONIBLERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERow FindByID_MATERIAL(int ID_MATERIAL) {
                return ((INVENTARIO_DISPONIBLERow)(this.Rows.Find(new object[] {
                            ID_MATERIAL})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INVENTARIO_DISPONIBLEDataTable cln = ((INVENTARIO_DISPONIBLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INVENTARIO_DISPONIBLEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
                this.columnCOMPRAS = base.Columns["COMPRAS"];
                this.columnVENTAS = base.Columns["VENTAS"];
                this.columnDIFERENCIA = base.Columns["DIFERENCIA"];
                this.columnDISPONIBILIDAD = base.Columns["DISPONIBILIDAD"];
                this.columnUNIDADES = base.Columns["UNIDADES"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.columnCOMPRAS = new global::System.Data.DataColumn("COMPRAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPRAS);
                this.columnVENTAS = new global::System.Data.DataColumn("VENTAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENTAS);
                this.columnDIFERENCIA = new global::System.Data.DataColumn("DIFERENCIA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIFERENCIA);
                this.columnDISPONIBILIDAD = new global::System.Data.DataColumn("DISPONIBILIDAD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISPONIBILIDAD);
                this.columnUNIDADES = new global::System.Data.DataColumn("UNIDADES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIDADES);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MATERIAL}, true));
                this.columnID_MATERIAL.AllowDBNull = false;
                this.columnID_MATERIAL.Unique = true;
                this.columnNOMBRE.MaxLength = 25;
                this.columnVENTAS.ReadOnly = true;
                this.columnDIFERENCIA.ReadOnly = true;
                this.columnDISPONIBILIDAD.ReadOnly = true;
                this.columnUNIDADES.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERow NewINVENTARIO_DISPONIBLERow() {
                return ((INVENTARIO_DISPONIBLERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INVENTARIO_DISPONIBLERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INVENTARIO_DISPONIBLERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INVENTARIO_DISPONIBLERowChanged != null)) {
                    this.INVENTARIO_DISPONIBLERowChanged(this, new INVENTARIO_DISPONIBLERowChangeEvent(((INVENTARIO_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INVENTARIO_DISPONIBLERowChanging != null)) {
                    this.INVENTARIO_DISPONIBLERowChanging(this, new INVENTARIO_DISPONIBLERowChangeEvent(((INVENTARIO_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INVENTARIO_DISPONIBLERowDeleted != null)) {
                    this.INVENTARIO_DISPONIBLERowDeleted(this, new INVENTARIO_DISPONIBLERowChangeEvent(((INVENTARIO_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INVENTARIO_DISPONIBLERowDeleting != null)) {
                    this.INVENTARIO_DISPONIBLERowDeleting(this, new INVENTARIO_DISPONIBLERowChangeEvent(((INVENTARIO_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINVENTARIO_DISPONIBLERow(INVENTARIO_DISPONIBLERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INVENTARIO_DISPONIBLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPRASDataTable : global::System.Data.TypedTableBase<COMPRASRow> {
            
            private global::System.Data.DataColumn columnID_COMPRA;
            
            private global::System.Data.DataColumn columnID_PROVEEDOR;
            
            private global::System.Data.DataColumn columnFECHA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASDataTable() {
                this.TableName = "COMPRAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPRASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPRASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_COMPRAColumn {
                get {
                    return this.columnID_COMPRA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_PROVEEDORColumn {
                get {
                    return this.columnID_PROVEEDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FECHAColumn {
                get {
                    return this.columnFECHA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow this[int index] {
                get {
                    return ((COMPRASRow)(this.Rows[index]));
                }
            }
            
            public event COMPRASRowChangeEventHandler COMPRASRowChanging;
            
            public event COMPRASRowChangeEventHandler COMPRASRowChanged;
            
            public event COMPRASRowChangeEventHandler COMPRASRowDeleting;
            
            public event COMPRASRowChangeEventHandler COMPRASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPRASRow(COMPRASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow AddCOMPRASRow(PROVEEDORESRow parentPROVEEDORESRowByFK_COMPRAS_FK_PROVEE_PROVEEDO, System.DateTime FECHA) {
                COMPRASRow rowCOMPRASRow = ((COMPRASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        FECHA};
                if ((parentPROVEEDORESRowByFK_COMPRAS_FK_PROVEE_PROVEEDO != null)) {
                    columnValuesArray[1] = parentPROVEEDORESRowByFK_COMPRAS_FK_PROVEE_PROVEEDO[0];
                }
                rowCOMPRASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCOMPRASRow);
                return rowCOMPRASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow FindByID_COMPRA(int ID_COMPRA) {
                return ((COMPRASRow)(this.Rows.Find(new object[] {
                            ID_COMPRA})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                COMPRASDataTable cln = ((COMPRASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new COMPRASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_COMPRA = base.Columns["ID_COMPRA"];
                this.columnID_PROVEEDOR = base.Columns["ID_PROVEEDOR"];
                this.columnFECHA = base.Columns["FECHA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_COMPRA = new global::System.Data.DataColumn("ID_COMPRA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_COMPRA);
                this.columnID_PROVEEDOR = new global::System.Data.DataColumn("ID_PROVEEDOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PROVEEDOR);
                this.columnFECHA = new global::System.Data.DataColumn("FECHA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFECHA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_COMPRA}, true));
                this.columnID_COMPRA.AutoIncrement = true;
                this.columnID_COMPRA.AutoIncrementSeed = -1;
                this.columnID_COMPRA.AutoIncrementStep = -1;
                this.columnID_COMPRA.AllowDBNull = false;
                this.columnID_COMPRA.ReadOnly = true;
                this.columnID_COMPRA.Unique = true;
                this.columnID_PROVEEDOR.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow NewCOMPRASRow() {
                return ((COMPRASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new COMPRASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(COMPRASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPRASRowChanged != null)) {
                    this.COMPRASRowChanged(this, new COMPRASRowChangeEvent(((COMPRASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPRASRowChanging != null)) {
                    this.COMPRASRowChanging(this, new COMPRASRowChangeEvent(((COMPRASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPRASRowDeleted != null)) {
                    this.COMPRASRowDeleted(this, new COMPRASRowChangeEvent(((COMPRASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPRASRowDeleting != null)) {
                    this.COMPRASRowDeleting(this, new COMPRASRowChangeEvent(((COMPRASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPRASRow(COMPRASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPRASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DETALLE_COMPRADataTable : global::System.Data.TypedTableBase<DETALLE_COMPRARow> {
            
            private global::System.Data.DataColumn columnID_COMPRA;
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnCANTIDAD;
            
            private global::System.Data.DataColumn columnPRECIOUNITARIO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRADataTable() {
                this.TableName = "DETALLE_COMPRA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DETALLE_COMPRADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DETALLE_COMPRADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_COMPRAColumn {
                get {
                    return this.columnID_COMPRA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CANTIDADColumn {
                get {
                    return this.columnCANTIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRECIOUNITARIOColumn {
                get {
                    return this.columnPRECIOUNITARIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow this[int index] {
                get {
                    return ((DETALLE_COMPRARow)(this.Rows[index]));
                }
            }
            
            public event DETALLE_COMPRARowChangeEventHandler DETALLE_COMPRARowChanging;
            
            public event DETALLE_COMPRARowChangeEventHandler DETALLE_COMPRARowChanged;
            
            public event DETALLE_COMPRARowChangeEventHandler DETALLE_COMPRARowDeleting;
            
            public event DETALLE_COMPRARowChangeEventHandler DETALLE_COMPRARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDETALLE_COMPRARow(DETALLE_COMPRARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow AddDETALLE_COMPRARow(COMPRASRow parentCOMPRASRowByFK_DETALLE__FK_COMPRA_COMPRAS, MATERIALESRow parentMATERIALESRowByFK_DETALLE__FK_COMPRA_MATERIAL, int CANTIDAD, decimal PRECIOUNITARIO) {
                DETALLE_COMPRARow rowDETALLE_COMPRARow = ((DETALLE_COMPRARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        CANTIDAD,
                        PRECIOUNITARIO};
                if ((parentCOMPRASRowByFK_DETALLE__FK_COMPRA_COMPRAS != null)) {
                    columnValuesArray[0] = parentCOMPRASRowByFK_DETALLE__FK_COMPRA_COMPRAS[0];
                }
                if ((parentMATERIALESRowByFK_DETALLE__FK_COMPRA_MATERIAL != null)) {
                    columnValuesArray[1] = parentMATERIALESRowByFK_DETALLE__FK_COMPRA_MATERIAL[0];
                }
                rowDETALLE_COMPRARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDETALLE_COMPRARow);
                return rowDETALLE_COMPRARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DETALLE_COMPRADataTable cln = ((DETALLE_COMPRADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DETALLE_COMPRADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_COMPRA = base.Columns["ID_COMPRA"];
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnCANTIDAD = base.Columns["CANTIDAD"];
                this.columnPRECIOUNITARIO = base.Columns["PRECIOUNITARIO"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_COMPRA = new global::System.Data.DataColumn("ID_COMPRA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_COMPRA);
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnCANTIDAD = new global::System.Data.DataColumn("CANTIDAD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANTIDAD);
                this.columnPRECIOUNITARIO = new global::System.Data.DataColumn("PRECIOUNITARIO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRECIOUNITARIO);
                this.columnID_COMPRA.AllowDBNull = false;
                this.columnID_MATERIAL.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow NewDETALLE_COMPRARow() {
                return ((DETALLE_COMPRARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DETALLE_COMPRARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DETALLE_COMPRARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DETALLE_COMPRARowChanged != null)) {
                    this.DETALLE_COMPRARowChanged(this, new DETALLE_COMPRARowChangeEvent(((DETALLE_COMPRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DETALLE_COMPRARowChanging != null)) {
                    this.DETALLE_COMPRARowChanging(this, new DETALLE_COMPRARowChangeEvent(((DETALLE_COMPRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DETALLE_COMPRARowDeleted != null)) {
                    this.DETALLE_COMPRARowDeleted(this, new DETALLE_COMPRARowChangeEvent(((DETALLE_COMPRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DETALLE_COMPRARowDeleting != null)) {
                    this.DETALLE_COMPRARowDeleting(this, new DETALLE_COMPRARowChangeEvent(((DETALLE_COMPRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDETALLE_COMPRARow(DETALLE_COMPRARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DETALLE_COMPRADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROVEEDORESDataTable : global::System.Data.TypedTableBase<PROVEEDORESRow> {
            
            private global::System.Data.DataColumn columnID_PROVEEDOR;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            private global::System.Data.DataColumn columnDIRECCION;
            
            private global::System.Data.DataColumn columnTELEFONO;
            
            private global::System.Data.DataColumn columnNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESDataTable() {
                this.TableName = "PROVEEDORES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROVEEDORESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROVEEDORESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_PROVEEDORColumn {
                get {
                    return this.columnID_PROVEEDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIRECCIONColumn {
                get {
                    return this.columnDIRECCION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TELEFONOColumn {
                get {
                    return this.columnTELEFONO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NITColumn {
                get {
                    return this.columnNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow this[int index] {
                get {
                    return ((PROVEEDORESRow)(this.Rows[index]));
                }
            }
            
            public event PROVEEDORESRowChangeEventHandler PROVEEDORESRowChanging;
            
            public event PROVEEDORESRowChangeEventHandler PROVEEDORESRowChanged;
            
            public event PROVEEDORESRowChangeEventHandler PROVEEDORESRowDeleting;
            
            public event PROVEEDORESRowChangeEventHandler PROVEEDORESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROVEEDORESRow(PROVEEDORESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow AddPROVEEDORESRow(string NOMBRE, string DIRECCION, string TELEFONO, string NIT) {
                PROVEEDORESRow rowPROVEEDORESRow = ((PROVEEDORESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NOMBRE,
                        DIRECCION,
                        TELEFONO,
                        NIT};
                rowPROVEEDORESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROVEEDORESRow);
                return rowPROVEEDORESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow FindByID_PROVEEDOR(int ID_PROVEEDOR) {
                return ((PROVEEDORESRow)(this.Rows.Find(new object[] {
                            ID_PROVEEDOR})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROVEEDORESDataTable cln = ((PROVEEDORESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROVEEDORESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_PROVEEDOR = base.Columns["ID_PROVEEDOR"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
                this.columnDIRECCION = base.Columns["DIRECCION"];
                this.columnTELEFONO = base.Columns["TELEFONO"];
                this.columnNIT = base.Columns["NIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_PROVEEDOR = new global::System.Data.DataColumn("ID_PROVEEDOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PROVEEDOR);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.columnDIRECCION = new global::System.Data.DataColumn("DIRECCION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRECCION);
                this.columnTELEFONO = new global::System.Data.DataColumn("TELEFONO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELEFONO);
                this.columnNIT = new global::System.Data.DataColumn("NIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNIT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_PROVEEDOR}, true));
                this.columnID_PROVEEDOR.AutoIncrement = true;
                this.columnID_PROVEEDOR.AutoIncrementSeed = -1;
                this.columnID_PROVEEDOR.AutoIncrementStep = -1;
                this.columnID_PROVEEDOR.AllowDBNull = false;
                this.columnID_PROVEEDOR.ReadOnly = true;
                this.columnID_PROVEEDOR.Unique = true;
                this.columnNOMBRE.MaxLength = 25;
                this.columnDIRECCION.MaxLength = 30;
                this.columnTELEFONO.MaxLength = 8;
                this.columnNIT.MaxLength = 14;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow NewPROVEEDORESRow() {
                return ((PROVEEDORESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROVEEDORESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROVEEDORESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROVEEDORESRowChanged != null)) {
                    this.PROVEEDORESRowChanged(this, new PROVEEDORESRowChangeEvent(((PROVEEDORESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROVEEDORESRowChanging != null)) {
                    this.PROVEEDORESRowChanging(this, new PROVEEDORESRowChangeEvent(((PROVEEDORESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROVEEDORESRowDeleted != null)) {
                    this.PROVEEDORESRowDeleted(this, new PROVEEDORESRowChangeEvent(((PROVEEDORESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROVEEDORESRowDeleting != null)) {
                    this.PROVEEDORESRowDeleting(this, new PROVEEDORESRowChangeEvent(((PROVEEDORESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROVEEDORESRow(PROVEEDORESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROVEEDORESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MATERIALESDataTable : global::System.Data.TypedTableBase<MATERIALESRow> {
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnID_MEDIDA;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESDataTable() {
                this.TableName = "MATERIALES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATERIALESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MATERIALESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MEDIDAColumn {
                get {
                    return this.columnID_MEDIDA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow this[int index] {
                get {
                    return ((MATERIALESRow)(this.Rows[index]));
                }
            }
            
            public event MATERIALESRowChangeEventHandler MATERIALESRowChanging;
            
            public event MATERIALESRowChangeEventHandler MATERIALESRowChanged;
            
            public event MATERIALESRowChangeEventHandler MATERIALESRowDeleting;
            
            public event MATERIALESRowChangeEventHandler MATERIALESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMATERIALESRow(MATERIALESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow AddMATERIALESRow(int ID_MEDIDA, string NOMBRE) {
                MATERIALESRow rowMATERIALESRow = ((MATERIALESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ID_MEDIDA,
                        NOMBRE};
                rowMATERIALESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMATERIALESRow);
                return rowMATERIALESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow FindByID_MATERIAL(int ID_MATERIAL) {
                return ((MATERIALESRow)(this.Rows.Find(new object[] {
                            ID_MATERIAL})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MATERIALESDataTable cln = ((MATERIALESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MATERIALESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnID_MEDIDA = base.Columns["ID_MEDIDA"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnID_MEDIDA = new global::System.Data.DataColumn("ID_MEDIDA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MEDIDA);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MATERIAL}, true));
                this.columnID_MATERIAL.AutoIncrement = true;
                this.columnID_MATERIAL.AutoIncrementSeed = -1;
                this.columnID_MATERIAL.AutoIncrementStep = -1;
                this.columnID_MATERIAL.AllowDBNull = false;
                this.columnID_MATERIAL.ReadOnly = true;
                this.columnID_MATERIAL.Unique = true;
                this.columnID_MEDIDA.AllowDBNull = false;
                this.columnNOMBRE.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow NewMATERIALESRow() {
                return ((MATERIALESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MATERIALESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MATERIALESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MATERIALESRowChanged != null)) {
                    this.MATERIALESRowChanged(this, new MATERIALESRowChangeEvent(((MATERIALESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MATERIALESRowChanging != null)) {
                    this.MATERIALESRowChanging(this, new MATERIALESRowChangeEvent(((MATERIALESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MATERIALESRowDeleted != null)) {
                    this.MATERIALESRowDeleted(this, new MATERIALESRowChangeEvent(((MATERIALESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MATERIALESRowDeleting != null)) {
                    this.MATERIALESRowDeleting(this, new MATERIALESRowChangeEvent(((MATERIALESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMATERIALESRow(MATERIALESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MATERIALESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MATERIALES_UNIDADESDataTable : global::System.Data.TypedTableBase<MATERIALES_UNIDADESRow> {
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            private global::System.Data.DataColumn columnUNIDAD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESDataTable() {
                this.TableName = "MATERIALES_UNIDADES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATERIALES_UNIDADESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MATERIALES_UNIDADESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIDADColumn {
                get {
                    return this.columnUNIDAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRow this[int index] {
                get {
                    return ((MATERIALES_UNIDADESRow)(this.Rows[index]));
                }
            }
            
            public event MATERIALES_UNIDADESRowChangeEventHandler MATERIALES_UNIDADESRowChanging;
            
            public event MATERIALES_UNIDADESRowChangeEventHandler MATERIALES_UNIDADESRowChanged;
            
            public event MATERIALES_UNIDADESRowChangeEventHandler MATERIALES_UNIDADESRowDeleting;
            
            public event MATERIALES_UNIDADESRowChangeEventHandler MATERIALES_UNIDADESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMATERIALES_UNIDADESRow(MATERIALES_UNIDADESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRow AddMATERIALES_UNIDADESRow(int ID_MATERIAL, string NOMBRE, string UNIDAD) {
                MATERIALES_UNIDADESRow rowMATERIALES_UNIDADESRow = ((MATERIALES_UNIDADESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_MATERIAL,
                        NOMBRE,
                        UNIDAD};
                rowMATERIALES_UNIDADESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMATERIALES_UNIDADESRow);
                return rowMATERIALES_UNIDADESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRow FindByID_MATERIAL(int ID_MATERIAL) {
                return ((MATERIALES_UNIDADESRow)(this.Rows.Find(new object[] {
                            ID_MATERIAL})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MATERIALES_UNIDADESDataTable cln = ((MATERIALES_UNIDADESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MATERIALES_UNIDADESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
                this.columnUNIDAD = base.Columns["UNIDAD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.columnUNIDAD = new global::System.Data.DataColumn("UNIDAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIDAD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MATERIAL}, true));
                this.columnID_MATERIAL.AllowDBNull = false;
                this.columnID_MATERIAL.Unique = true;
                this.columnNOMBRE.MaxLength = 25;
                this.columnUNIDAD.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRow NewMATERIALES_UNIDADESRow() {
                return ((MATERIALES_UNIDADESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MATERIALES_UNIDADESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MATERIALES_UNIDADESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MATERIALES_UNIDADESRowChanged != null)) {
                    this.MATERIALES_UNIDADESRowChanged(this, new MATERIALES_UNIDADESRowChangeEvent(((MATERIALES_UNIDADESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MATERIALES_UNIDADESRowChanging != null)) {
                    this.MATERIALES_UNIDADESRowChanging(this, new MATERIALES_UNIDADESRowChangeEvent(((MATERIALES_UNIDADESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MATERIALES_UNIDADESRowDeleted != null)) {
                    this.MATERIALES_UNIDADESRowDeleted(this, new MATERIALES_UNIDADESRowChangeEvent(((MATERIALES_UNIDADESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MATERIALES_UNIDADESRowDeleting != null)) {
                    this.MATERIALES_UNIDADESRowDeleting(this, new MATERIALES_UNIDADESRowChangeEvent(((MATERIALES_UNIDADESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMATERIALES_UNIDADESRow(MATERIALES_UNIDADESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MATERIALES_UNIDADESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ONLY_MATERIAL_DISPONIBLEDataTable : global::System.Data.TypedTableBase<ONLY_MATERIAL_DISPONIBLERow> {
            
            private global::System.Data.DataColumn columnID_MATERIAL;
            
            private global::System.Data.DataColumn columnNOMBRE;
            
            private global::System.Data.DataColumn columnDISPONIBLES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLEDataTable() {
                this.TableName = "ONLY_MATERIAL_DISPONIBLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ONLY_MATERIAL_DISPONIBLEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ONLY_MATERIAL_DISPONIBLEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_MATERIALColumn {
                get {
                    return this.columnID_MATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISPONIBLESColumn {
                get {
                    return this.columnDISPONIBLES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERow this[int index] {
                get {
                    return ((ONLY_MATERIAL_DISPONIBLERow)(this.Rows[index]));
                }
            }
            
            public event ONLY_MATERIAL_DISPONIBLERowChangeEventHandler ONLY_MATERIAL_DISPONIBLERowChanging;
            
            public event ONLY_MATERIAL_DISPONIBLERowChangeEventHandler ONLY_MATERIAL_DISPONIBLERowChanged;
            
            public event ONLY_MATERIAL_DISPONIBLERowChangeEventHandler ONLY_MATERIAL_DISPONIBLERowDeleting;
            
            public event ONLY_MATERIAL_DISPONIBLERowChangeEventHandler ONLY_MATERIAL_DISPONIBLERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddONLY_MATERIAL_DISPONIBLERow(ONLY_MATERIAL_DISPONIBLERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERow AddONLY_MATERIAL_DISPONIBLERow(int ID_MATERIAL, string NOMBRE, string DISPONIBLES) {
                ONLY_MATERIAL_DISPONIBLERow rowONLY_MATERIAL_DISPONIBLERow = ((ONLY_MATERIAL_DISPONIBLERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_MATERIAL,
                        NOMBRE,
                        DISPONIBLES};
                rowONLY_MATERIAL_DISPONIBLERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowONLY_MATERIAL_DISPONIBLERow);
                return rowONLY_MATERIAL_DISPONIBLERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERow FindByID_MATERIAL(int ID_MATERIAL) {
                return ((ONLY_MATERIAL_DISPONIBLERow)(this.Rows.Find(new object[] {
                            ID_MATERIAL})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ONLY_MATERIAL_DISPONIBLEDataTable cln = ((ONLY_MATERIAL_DISPONIBLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ONLY_MATERIAL_DISPONIBLEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_MATERIAL = base.Columns["ID_MATERIAL"];
                this.columnNOMBRE = base.Columns["NOMBRE"];
                this.columnDISPONIBLES = base.Columns["DISPONIBLES"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_MATERIAL = new global::System.Data.DataColumn("ID_MATERIAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MATERIAL);
                this.columnNOMBRE = new global::System.Data.DataColumn("NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOMBRE);
                this.columnDISPONIBLES = new global::System.Data.DataColumn("DISPONIBLES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISPONIBLES);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MATERIAL}, true));
                this.columnID_MATERIAL.AllowDBNull = false;
                this.columnID_MATERIAL.Unique = true;
                this.columnNOMBRE.MaxLength = 25;
                this.columnDISPONIBLES.ReadOnly = true;
                this.columnDISPONIBLES.MaxLength = 48;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERow NewONLY_MATERIAL_DISPONIBLERow() {
                return ((ONLY_MATERIAL_DISPONIBLERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ONLY_MATERIAL_DISPONIBLERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ONLY_MATERIAL_DISPONIBLERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ONLY_MATERIAL_DISPONIBLERowChanged != null)) {
                    this.ONLY_MATERIAL_DISPONIBLERowChanged(this, new ONLY_MATERIAL_DISPONIBLERowChangeEvent(((ONLY_MATERIAL_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ONLY_MATERIAL_DISPONIBLERowChanging != null)) {
                    this.ONLY_MATERIAL_DISPONIBLERowChanging(this, new ONLY_MATERIAL_DISPONIBLERowChangeEvent(((ONLY_MATERIAL_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ONLY_MATERIAL_DISPONIBLERowDeleted != null)) {
                    this.ONLY_MATERIAL_DISPONIBLERowDeleted(this, new ONLY_MATERIAL_DISPONIBLERowChangeEvent(((ONLY_MATERIAL_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ONLY_MATERIAL_DISPONIBLERowDeleting != null)) {
                    this.ONLY_MATERIAL_DISPONIBLERowDeleting(this, new ONLY_MATERIAL_DISPONIBLERowChangeEvent(((ONLY_MATERIAL_DISPONIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveONLY_MATERIAL_DISPONIBLERow(ONLY_MATERIAL_DISPONIBLERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventariosDS ds = new InventariosDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ONLY_MATERIAL_DISPONIBLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INVENTARIO_CARDEXRow : global::System.Data.DataRow {
            
            private INVENTARIO_CARDEXDataTable tableINVENTARIO_CARDEX;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INVENTARIO_CARDEXRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINVENTARIO_CARDEX = ((INVENTARIO_CARDEXDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableINVENTARIO_CARDEX.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FECHA {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableINVENTARIO_CARDEX.FECHAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FECHA\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.FECHAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPRAS {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_CARDEX.COMPRASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COMPRAS\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.COMPRASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VENTAS {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_CARDEX.VENTASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'VENTAS\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.VENTASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DIFERENCIA {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_CARDEX.DIFERENCIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DIFERENCIA\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.DIFERENCIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRECIOUNITARIO {
                get {
                    try {
                        return ((decimal)(this[this.tableINVENTARIO_CARDEX.PRECIOUNITARIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'PRECIOUNITARIO\' de la tabla \'INVENTARIO_CARDEX\' es DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.PRECIOUNITARIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISPONIBILIDAD {
                get {
                    if (this.IsDISPONIBILIDADNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.DISPONIBILIDADColumn]));
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.DISPONIBILIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROVEEDOR {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.PROVEEDORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'PROVEEDOR\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.PROVEEDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPRASUNIDAD {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.COMPRASUNIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COMPRASUNIDAD\' de la tabla \'INVENTARIO_CARDEX\' es DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.COMPRASUNIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VENTASUNIDAD {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.VENTASUNIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'VENTASUNIDAD\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.VENTASUNIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTALUNIDAD {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_CARDEX.TOTALUNIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'TOTALUNIDAD\' de la tabla \'INVENTARIO_CARDEX\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_CARDEX.TOTALUNIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFECHANull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.FECHAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFECHANull() {
                this[this.tableINVENTARIO_CARDEX.FECHAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tableINVENTARIO_CARDEX.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPRASNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.COMPRASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPRASNull() {
                this[this.tableINVENTARIO_CARDEX.COMPRASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENTASNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.VENTASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENTASNull() {
                this[this.tableINVENTARIO_CARDEX.VENTASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIFERENCIANull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.DIFERENCIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIFERENCIANull() {
                this[this.tableINVENTARIO_CARDEX.DIFERENCIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRECIOUNITARIONull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.PRECIOUNITARIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRECIOUNITARIONull() {
                this[this.tableINVENTARIO_CARDEX.PRECIOUNITARIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISPONIBILIDADNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.DISPONIBILIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISPONIBILIDADNull() {
                this[this.tableINVENTARIO_CARDEX.DISPONIBILIDADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROVEEDORNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.PROVEEDORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROVEEDORNull() {
                this[this.tableINVENTARIO_CARDEX.PROVEEDORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPRASUNIDADNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.COMPRASUNIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPRASUNIDADNull() {
                this[this.tableINVENTARIO_CARDEX.COMPRASUNIDADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENTASUNIDADNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.VENTASUNIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENTASUNIDADNull() {
                this[this.tableINVENTARIO_CARDEX.VENTASUNIDADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALUNIDADNull() {
                return this.IsNull(this.tableINVENTARIO_CARDEX.TOTALUNIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALUNIDADNull() {
                this[this.tableINVENTARIO_CARDEX.TOTALUNIDADColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INVENTARIO_DISPONIBLERow : global::System.Data.DataRow {
            
            private INVENTARIO_DISPONIBLEDataTable tableINVENTARIO_DISPONIBLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INVENTARIO_DISPONIBLERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINVENTARIO_DISPONIBLE = ((INVENTARIO_DISPONIBLEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableINVENTARIO_DISPONIBLE.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_DISPONIBLE.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'INVENTARIO_DISPONIBLE\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPRAS {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_DISPONIBLE.COMPRASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'COMPRAS\' de la tabla \'INVENTARIO_DISPONIBLE\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.COMPRASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VENTAS {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_DISPONIBLE.VENTASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'VENTAS\' de la tabla \'INVENTARIO_DISPONIBLE\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.VENTASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DIFERENCIA {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_DISPONIBLE.DIFERENCIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DIFERENCIA\' de la tabla \'INVENTARIO_DISPONIBLE\' es DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.DIFERENCIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DISPONIBILIDAD {
                get {
                    try {
                        return ((int)(this[this.tableINVENTARIO_DISPONIBLE.DISPONIBILIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DISPONIBILIDAD\' de la tabla \'INVENTARIO_DISPONIBLE\' es DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.DISPONIBILIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIDADES {
                get {
                    try {
                        return ((string)(this[this.tableINVENTARIO_DISPONIBLE.UNIDADESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'UNIDADES\' de la tabla \'INVENTARIO_DISPONIBLE\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableINVENTARIO_DISPONIBLE.UNIDADESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tableINVENTARIO_DISPONIBLE.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPRASNull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.COMPRASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPRASNull() {
                this[this.tableINVENTARIO_DISPONIBLE.COMPRASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENTASNull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.VENTASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENTASNull() {
                this[this.tableINVENTARIO_DISPONIBLE.VENTASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIFERENCIANull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.DIFERENCIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIFERENCIANull() {
                this[this.tableINVENTARIO_DISPONIBLE.DIFERENCIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISPONIBILIDADNull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.DISPONIBILIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISPONIBILIDADNull() {
                this[this.tableINVENTARIO_DISPONIBLE.DISPONIBILIDADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIDADESNull() {
                return this.IsNull(this.tableINVENTARIO_DISPONIBLE.UNIDADESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIDADESNull() {
                this[this.tableINVENTARIO_DISPONIBLE.UNIDADESColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPRASRow : global::System.Data.DataRow {
            
            private COMPRASDataTable tableCOMPRAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPRASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPRAS = ((COMPRASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_COMPRA {
                get {
                    return ((int)(this[this.tableCOMPRAS.ID_COMPRAColumn]));
                }
                set {
                    this[this.tableCOMPRAS.ID_COMPRAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PROVEEDOR {
                get {
                    return ((int)(this[this.tableCOMPRAS.ID_PROVEEDORColumn]));
                }
                set {
                    this[this.tableCOMPRAS.ID_PROVEEDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FECHA {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCOMPRAS.FECHAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FECHA\' de la tabla \'COMPRAS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPRAS.FECHAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow PROVEEDORESRow {
                get {
                    return ((PROVEEDORESRow)(this.GetParentRow(this.Table.ParentRelations["FK_COMPRAS_FK_PROVEE_PROVEEDO"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COMPRAS_FK_PROVEE_PROVEEDO"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFECHANull() {
                return this.IsNull(this.tableCOMPRAS.FECHAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFECHANull() {
                this[this.tableCOMPRAS.FECHAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow[] GetDETALLE_COMPRARows() {
                if ((this.Table.ChildRelations["FK_DETALLE__FK_COMPRA_COMPRAS"] == null)) {
                    return new DETALLE_COMPRARow[0];
                }
                else {
                    return ((DETALLE_COMPRARow[])(base.GetChildRows(this.Table.ChildRelations["FK_DETALLE__FK_COMPRA_COMPRAS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DETALLE_COMPRARow : global::System.Data.DataRow {
            
            private DETALLE_COMPRADataTable tableDETALLE_COMPRA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DETALLE_COMPRARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDETALLE_COMPRA = ((DETALLE_COMPRADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_COMPRA {
                get {
                    return ((int)(this[this.tableDETALLE_COMPRA.ID_COMPRAColumn]));
                }
                set {
                    this[this.tableDETALLE_COMPRA.ID_COMPRAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableDETALLE_COMPRA.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableDETALLE_COMPRA.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CANTIDAD {
                get {
                    try {
                        return ((int)(this[this.tableDETALLE_COMPRA.CANTIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'CANTIDAD\' de la tabla \'DETALLE_COMPRA\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE_COMPRA.CANTIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRECIOUNITARIO {
                get {
                    try {
                        return ((decimal)(this[this.tableDETALLE_COMPRA.PRECIOUNITARIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'PRECIOUNITARIO\' de la tabla \'DETALLE_COMPRA\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE_COMPRA.PRECIOUNITARIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow COMPRASRow {
                get {
                    return ((COMPRASRow)(this.GetParentRow(this.Table.ParentRelations["FK_DETALLE__FK_COMPRA_COMPRAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DETALLE__FK_COMPRA_COMPRAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow MATERIALESRow {
                get {
                    return ((MATERIALESRow)(this.GetParentRow(this.Table.ParentRelations["FK_DETALLE__FK_COMPRA_MATERIAL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DETALLE__FK_COMPRA_MATERIAL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCANTIDADNull() {
                return this.IsNull(this.tableDETALLE_COMPRA.CANTIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCANTIDADNull() {
                this[this.tableDETALLE_COMPRA.CANTIDADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRECIOUNITARIONull() {
                return this.IsNull(this.tableDETALLE_COMPRA.PRECIOUNITARIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRECIOUNITARIONull() {
                this[this.tableDETALLE_COMPRA.PRECIOUNITARIOColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROVEEDORESRow : global::System.Data.DataRow {
            
            private PROVEEDORESDataTable tablePROVEEDORES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROVEEDORESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROVEEDORES = ((PROVEEDORESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PROVEEDOR {
                get {
                    return ((int)(this[this.tablePROVEEDORES.ID_PROVEEDORColumn]));
                }
                set {
                    this[this.tablePROVEEDORES.ID_PROVEEDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tablePROVEEDORES.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'PROVEEDORES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROVEEDORES.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIRECCION {
                get {
                    try {
                        return ((string)(this[this.tablePROVEEDORES.DIRECCIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DIRECCION\' de la tabla \'PROVEEDORES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROVEEDORES.DIRECCIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELEFONO {
                get {
                    try {
                        return ((string)(this[this.tablePROVEEDORES.TELEFONOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'TELEFONO\' de la tabla \'PROVEEDORES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROVEEDORES.TELEFONOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NIT {
                get {
                    try {
                        return ((string)(this[this.tablePROVEEDORES.NITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NIT\' de la tabla \'PROVEEDORES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROVEEDORES.NITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tablePROVEEDORES.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tablePROVEEDORES.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRECCIONNull() {
                return this.IsNull(this.tablePROVEEDORES.DIRECCIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRECCIONNull() {
                this[this.tablePROVEEDORES.DIRECCIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTELEFONONull() {
                return this.IsNull(this.tablePROVEEDORES.TELEFONOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTELEFONONull() {
                this[this.tablePROVEEDORES.TELEFONOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNITNull() {
                return this.IsNull(this.tablePROVEEDORES.NITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNITNull() {
                this[this.tablePROVEEDORES.NITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow[] GetCOMPRASRows() {
                if ((this.Table.ChildRelations["FK_COMPRAS_FK_PROVEE_PROVEEDO"] == null)) {
                    return new COMPRASRow[0];
                }
                else {
                    return ((COMPRASRow[])(base.GetChildRows(this.Table.ChildRelations["FK_COMPRAS_FK_PROVEE_PROVEEDO"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MATERIALESRow : global::System.Data.DataRow {
            
            private MATERIALESDataTable tableMATERIALES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATERIALESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMATERIALES = ((MATERIALESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableMATERIALES.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableMATERIALES.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MEDIDA {
                get {
                    return ((int)(this[this.tableMATERIALES.ID_MEDIDAColumn]));
                }
                set {
                    this[this.tableMATERIALES.ID_MEDIDAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableMATERIALES.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'MATERIALES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMATERIALES.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableMATERIALES.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tableMATERIALES.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow[] GetDETALLE_COMPRARows() {
                if ((this.Table.ChildRelations["FK_DETALLE__FK_COMPRA_MATERIAL"] == null)) {
                    return new DETALLE_COMPRARow[0];
                }
                else {
                    return ((DETALLE_COMPRARow[])(base.GetChildRows(this.Table.ChildRelations["FK_DETALLE__FK_COMPRA_MATERIAL"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MATERIALES_UNIDADESRow : global::System.Data.DataRow {
            
            private MATERIALES_UNIDADESDataTable tableMATERIALES_UNIDADES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATERIALES_UNIDADESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMATERIALES_UNIDADES = ((MATERIALES_UNIDADESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableMATERIALES_UNIDADES.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableMATERIALES_UNIDADES.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableMATERIALES_UNIDADES.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'MATERIALES_UNIDADES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMATERIALES_UNIDADES.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIDAD {
                get {
                    try {
                        return ((string)(this[this.tableMATERIALES_UNIDADES.UNIDADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'UNIDAD\' de la tabla \'MATERIALES_UNIDADES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMATERIALES_UNIDADES.UNIDADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableMATERIALES_UNIDADES.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tableMATERIALES_UNIDADES.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIDADNull() {
                return this.IsNull(this.tableMATERIALES_UNIDADES.UNIDADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIDADNull() {
                this[this.tableMATERIALES_UNIDADES.UNIDADColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ONLY_MATERIAL_DISPONIBLERow : global::System.Data.DataRow {
            
            private ONLY_MATERIAL_DISPONIBLEDataTable tableONLY_MATERIAL_DISPONIBLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ONLY_MATERIAL_DISPONIBLERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableONLY_MATERIAL_DISPONIBLE = ((ONLY_MATERIAL_DISPONIBLEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_MATERIAL {
                get {
                    return ((int)(this[this.tableONLY_MATERIAL_DISPONIBLE.ID_MATERIALColumn]));
                }
                set {
                    this[this.tableONLY_MATERIAL_DISPONIBLE.ID_MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableONLY_MATERIAL_DISPONIBLE.NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'NOMBRE\' de la tabla \'ONLY_MATERIAL_DISPONIBLE\' es DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableONLY_MATERIAL_DISPONIBLE.NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISPONIBLES {
                get {
                    try {
                        return ((string)(this[this.tableONLY_MATERIAL_DISPONIBLE.DISPONIBLESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DISPONIBLES\' de la tabla \'ONLY_MATERIAL_DISPONIBLE\' es DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableONLY_MATERIAL_DISPONIBLE.DISPONIBLESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableONLY_MATERIAL_DISPONIBLE.NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOMBRENull() {
                this[this.tableONLY_MATERIAL_DISPONIBLE.NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISPONIBLESNull() {
                return this.IsNull(this.tableONLY_MATERIAL_DISPONIBLE.DISPONIBLESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISPONIBLESNull() {
                this[this.tableONLY_MATERIAL_DISPONIBLE.DISPONIBLESColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INVENTARIO_CARDEXRowChangeEvent : global::System.EventArgs {
            
            private INVENTARIO_CARDEXRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRowChangeEvent(INVENTARIO_CARDEXRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_CARDEXRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INVENTARIO_DISPONIBLERowChangeEvent : global::System.EventArgs {
            
            private INVENTARIO_DISPONIBLERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERowChangeEvent(INVENTARIO_DISPONIBLERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INVENTARIO_DISPONIBLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPRASRowChangeEvent : global::System.EventArgs {
            
            private COMPRASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRowChangeEvent(COMPRASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPRASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DETALLE_COMPRARowChangeEvent : global::System.EventArgs {
            
            private DETALLE_COMPRARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARowChangeEvent(DETALLE_COMPRARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DETALLE_COMPRARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROVEEDORESRowChangeEvent : global::System.EventArgs {
            
            private PROVEEDORESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRowChangeEvent(PROVEEDORESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVEEDORESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MATERIALESRowChangeEvent : global::System.EventArgs {
            
            private MATERIALESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRowChangeEvent(MATERIALESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MATERIALES_UNIDADESRowChangeEvent : global::System.EventArgs {
            
            private MATERIALES_UNIDADESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRowChangeEvent(MATERIALES_UNIDADESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATERIALES_UNIDADESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ONLY_MATERIAL_DISPONIBLERowChangeEvent : global::System.EventArgs {
            
            private ONLY_MATERIAL_DISPONIBLERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERowChangeEvent(ONLY_MATERIAL_DISPONIBLERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ONLY_MATERIAL_DISPONIBLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Kaikei.InventariosDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class INVENTARIO_CARDEXTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INVENTARIO_CARDEXTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "INVENTARIO_CARDEX";
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("FECHA", "FECHA");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            tableMapping.ColumnMappings.Add("COMPRAS", "COMPRAS");
            tableMapping.ColumnMappings.Add("VENTAS", "VENTAS");
            tableMapping.ColumnMappings.Add("DIFERENCIA", "DIFERENCIA");
            tableMapping.ColumnMappings.Add("PRECIOUNITARIO", "PRECIOUNITARIO");
            tableMapping.ColumnMappings.Add("DISPONIBILIDAD", "DISPONIBILIDAD");
            tableMapping.ColumnMappings.Add("PROVEEDOR", "PROVEEDOR");
            tableMapping.ColumnMappings.Add("COMPRASUNIDAD", "COMPRASUNIDAD");
            tableMapping.ColumnMappings.Add("VENTASUNIDAD", "VENTASUNIDAD");
            tableMapping.ColumnMappings.Add("TOTALUNIDAD", "TOTALUNIDAD");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_MATERIAL, FECHA, NOMBRE, COMPRAS, VENTAS, DIFERENCIA, PRECIOUNITARIO, D" +
                "ISPONIBILIDAD, COMPRASUNIDAD, PROVEEDOR, VENTASUNIDAD, TOTALUNIDAD FROM INVENTAR" +
                "IO_CARDEX";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT ID_MATERIAL, FECHA, NOMBRE, COMPRAS, VENTAS, DIFERENCIA, PRECIOUNITARIO, D" +
                "ISPONIBILIDAD, COMPRASUNIDAD, PROVEEDOR, VENTASUNIDAD, TOTALUNIDAD FROM INVENTAR" +
                "IO_CARDEX WHERE (ID_MATERIAL = @IDM)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDM", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MATERIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.INVENTARIO_CARDEXDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.INVENTARIO_CARDEXDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.INVENTARIO_CARDEXDataTable dataTable = new InventariosDS.INVENTARIO_CARDEXDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByID(InventariosDS.INVENTARIO_CARDEXDataTable dataTable, int IDM) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDM));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual InventariosDS.INVENTARIO_CARDEXDataTable GetDataByID(int IDM) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDM));
            InventariosDS.INVENTARIO_CARDEXDataTable dataTable = new InventariosDS.INVENTARIO_CARDEXDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class INVENTARIO_DISPONIBLETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INVENTARIO_DISPONIBLETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "INVENTARIO_DISPONIBLE";
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            tableMapping.ColumnMappings.Add("COMPRAS", "COMPRAS");
            tableMapping.ColumnMappings.Add("VENTAS", "VENTAS");
            tableMapping.ColumnMappings.Add("DIFERENCIA", "DIFERENCIA");
            tableMapping.ColumnMappings.Add("DISPONIBILIDAD", "DISPONIBILIDAD");
            tableMapping.ColumnMappings.Add("UNIDADES", "UNIDADES");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_MATERIAL, NOMBRE, COMPRAS, VENTAS, DIFERENCIA, DISPONIBILIDAD, UNIDADES" +
                " FROM INVENTARIO_DISPONIBLE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.INVENTARIO_DISPONIBLEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.INVENTARIO_DISPONIBLEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.INVENTARIO_DISPONIBLEDataTable dataTable = new InventariosDS.INVENTARIO_DISPONIBLEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPRASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPRASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPRAS";
            tableMapping.ColumnMappings.Add("ID_COMPRA", "ID_COMPRA");
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR");
            tableMapping.ColumnMappings.Add("FECHA", "FECHA");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COMPRAS] WHERE (([ID_COMPRA] = @Original_ID_COMPRA) AND ([ID_P" +
                "ROVEEDOR] = @Original_ID_PROVEEDOR) AND ((@IsNull_FECHA = 1 AND [FECHA] IS NULL)" +
                " OR ([FECHA] = @Original_FECHA)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_COMPRA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FECHA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FECHA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COMPRAS] ([ID_PROVEEDOR], [FECHA]) VALUES (@ID_PROVEEDOR, @FEC" +
                "HA);\r\nSELECT ID_COMPRA, ID_PROVEEDOR, FECHA FROM COMPRAS WHERE (ID_COMPRA = SCOP" +
                "E_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FECHA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[COMPRAS] SET [ID_PROVEEDOR] = @ID_PROVEEDOR, [FECHA] = @FECHA WHERE (([ID_COMPRA] = @Original_ID_COMPRA) AND ([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ((@IsNull_FECHA = 1 AND [FECHA] IS NULL) OR ([FECHA] = @Original_FECHA)));
SELECT ID_COMPRA, ID_PROVEEDOR, FECHA FROM COMPRAS WHERE (ID_COMPRA = @ID_COMPRA)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FECHA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_COMPRA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FECHA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FECHA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FECHA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_COMPRA", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID_COMPRA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_COMPRA, ID_PROVEEDOR, FECHA FROM dbo.COMPRAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.COMPRASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.COMPRASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.COMPRASDataTable dataTable = new InventariosDS.COMPRASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS.COMPRASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS dataSet) {
            return this.Adapter.Update(dataSet, "COMPRAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_COMPRA, int Original_ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> Original_FECHA) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_COMPRA));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_PROVEEDOR));
            if ((Original_FECHA.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_FECHA.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> FECHA) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_PROVEEDOR));
            if ((FECHA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(FECHA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> FECHA, int Original_ID_COMPRA, int Original_ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> Original_FECHA, int ID_COMPRA) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_PROVEEDOR));
            if ((FECHA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(FECHA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_COMPRA));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_PROVEEDOR));
            if ((Original_FECHA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_FECHA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID_COMPRA));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> FECHA, int Original_ID_COMPRA, int Original_ID_PROVEEDOR, global::System.Nullable<global::System.DateTime> Original_FECHA) {
            return this.Update(ID_PROVEEDOR, FECHA, Original_ID_COMPRA, Original_ID_PROVEEDOR, Original_FECHA, Original_ID_COMPRA);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DETALLE_COMPRATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DETALLE_COMPRATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DETALLE_COMPRA";
            tableMapping.ColumnMappings.Add("ID_COMPRA", "ID_COMPRA");
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("CANTIDAD", "CANTIDAD");
            tableMapping.ColumnMappings.Add("PRECIOUNITARIO", "PRECIOUNITARIO");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DETALLE_COMPRA] ([ID_COMPRA], [ID_MATERIAL], [CANTIDAD], [PREC" +
                "IOUNITARIO]) VALUES (@ID_COMPRA, @ID_MATERIAL, @CANTIDAD, @PRECIOUNITARIO)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_COMPRA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_COMPRA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_MATERIAL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MATERIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CANTIDAD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CANTIDAD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRECIOUNITARIO", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRECIOUNITARIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_COMPRA, ID_MATERIAL, CANTIDAD, PRECIOUNITARIO FROM dbo.DETALLE_COMPRA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.DETALLE_COMPRADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.DETALLE_COMPRADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.DETALLE_COMPRADataTable dataTable = new InventariosDS.DETALLE_COMPRADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS.DETALLE_COMPRADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS dataSet) {
            return this.Adapter.Update(dataSet, "DETALLE_COMPRA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_COMPRA, int ID_MATERIAL, global::System.Nullable<int> CANTIDAD, global::System.Nullable<decimal> PRECIOUNITARIO) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_COMPRA));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ID_MATERIAL));
            if ((CANTIDAD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(CANTIDAD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PRECIOUNITARIO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PRECIOUNITARIO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROVEEDORESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROVEEDORESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROVEEDORES";
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION");
            tableMapping.ColumnMappings.Add("TELEFONO", "TELEFONO");
            tableMapping.ColumnMappings.Add("NIT", "NIT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PROVEEDORES] WHERE (([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ((@IsNull_NOMBRE = 1 AND [NOMBRE] IS NULL) OR ([NOMBRE] = @Original_NOMBRE)) AND ((@IsNull_DIRECCION = 1 AND [DIRECCION] IS NULL) OR ([DIRECCION] = @Original_DIRECCION)) AND ((@IsNull_TELEFONO = 1 AND [TELEFONO] IS NULL) OR ([TELEFONO] = @Original_TELEFONO)) AND ((@IsNull_NIT = 1 AND [NIT] IS NULL) OR ([NIT] = @Original_NIT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DIRECCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DIRECCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TELEFONO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TELEFONO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NIT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NIT", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROVEEDORES] ([NOMBRE], [DIRECCION], [TELEFONO], [NIT]) VALUES" +
                " (@NOMBRE, @DIRECCION, @TELEFONO, @NIT);\r\nSELECT ID_PROVEEDOR, NOMBRE, DIRECCION" +
                ", TELEFONO, NIT FROM PROVEEDORES WHERE (ID_PROVEEDOR = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DIRECCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TELEFONO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NIT", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PROVEEDORES] SET [NOMBRE] = @NOMBRE, [DIRECCION] = @DIRECCION, [TELEFONO] = @TELEFONO, [NIT] = @NIT WHERE (([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ((@IsNull_NOMBRE = 1 AND [NOMBRE] IS NULL) OR ([NOMBRE] = @Original_NOMBRE)) AND ((@IsNull_DIRECCION = 1 AND [DIRECCION] IS NULL) OR ([DIRECCION] = @Original_DIRECCION)) AND ((@IsNull_TELEFONO = 1 AND [TELEFONO] IS NULL) OR ([TELEFONO] = @Original_TELEFONO)) AND ((@IsNull_NIT = 1 AND [NIT] IS NULL) OR ([NIT] = @Original_NIT)));
SELECT ID_PROVEEDOR, NOMBRE, DIRECCION, TELEFONO, NIT FROM PROVEEDORES WHERE (ID_PROVEEDOR = @ID_PROVEEDOR)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DIRECCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TELEFONO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NIT", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DIRECCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DIRECCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TELEFONO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TELEFONO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NIT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NIT", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NIT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID_PROVEEDOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_PROVEEDOR, NOMBRE, DIRECCION, TELEFONO, NIT FROM dbo.PROVEEDORES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.PROVEEDORESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.PROVEEDORESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.PROVEEDORESDataTable dataTable = new InventariosDS.PROVEEDORESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS.PROVEEDORESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS dataSet) {
            return this.Adapter.Update(dataSet, "PROVEEDORES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_PROVEEDOR, string Original_NOMBRE, string Original_DIRECCION, string Original_TELEFONO, string Original_NIT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_PROVEEDOR));
            if ((Original_NOMBRE == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NOMBRE));
            }
            if ((Original_DIRECCION == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_DIRECCION));
            }
            if ((Original_TELEFONO == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_TELEFONO));
            }
            if ((Original_NIT == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_NIT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NOMBRE, string DIRECCION, string TELEFONO, string NIT) {
            if ((NOMBRE == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NOMBRE));
            }
            if ((DIRECCION == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DIRECCION));
            }
            if ((TELEFONO == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TELEFONO));
            }
            if ((NIT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(NIT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NOMBRE, string DIRECCION, string TELEFONO, string NIT, int Original_ID_PROVEEDOR, string Original_NOMBRE, string Original_DIRECCION, string Original_TELEFONO, string Original_NIT, int ID_PROVEEDOR) {
            if ((NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NOMBRE));
            }
            if ((DIRECCION == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DIRECCION));
            }
            if ((TELEFONO == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TELEFONO));
            }
            if ((NIT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(NIT));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_PROVEEDOR));
            if ((Original_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_NOMBRE));
            }
            if ((Original_DIRECCION == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_DIRECCION));
            }
            if ((Original_TELEFONO == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_TELEFONO));
            }
            if ((Original_NIT == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_NIT));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(ID_PROVEEDOR));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NOMBRE, string DIRECCION, string TELEFONO, string NIT, int Original_ID_PROVEEDOR, string Original_NOMBRE, string Original_DIRECCION, string Original_TELEFONO, string Original_NIT) {
            return this.Update(NOMBRE, DIRECCION, TELEFONO, NIT, Original_ID_PROVEEDOR, Original_NOMBRE, Original_DIRECCION, Original_TELEFONO, Original_NIT, Original_ID_PROVEEDOR);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MATERIALESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATERIALESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MATERIALES";
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("ID_MEDIDA", "ID_MEDIDA");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MATERIALES] WHERE (([ID_MATERIAL] = @Original_ID_MATERIAL) AND" +
                " ([ID_MEDIDA] = @Original_ID_MEDIDA) AND ((@IsNull_NOMBRE = 1 AND [NOMBRE] IS NU" +
                "LL) OR ([NOMBRE] = @Original_NOMBRE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_MATERIAL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MATERIAL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_MEDIDA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MEDIDA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MATERIALES] ([ID_MEDIDA], [NOMBRE]) VALUES (@ID_MEDIDA, @NOMBR" +
                "E);\r\nSELECT ID_MATERIAL, ID_MEDIDA, NOMBRE FROM MATERIALES WHERE (ID_MATERIAL = " +
                "SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_MEDIDA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MEDIDA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MATERIALES] SET [ID_MEDIDA] = @ID_MEDIDA, [NOMBRE] = @NOMBRE WHERE (([ID_MATERIAL] = @Original_ID_MATERIAL) AND ([ID_MEDIDA] = @Original_ID_MEDIDA) AND ((@IsNull_NOMBRE = 1 AND [NOMBRE] IS NULL) OR ([NOMBRE] = @Original_NOMBRE)));
SELECT ID_MATERIAL, ID_MEDIDA, NOMBRE FROM MATERIALES WHERE (ID_MATERIAL = @ID_MATERIAL)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_MEDIDA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MEDIDA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_MATERIAL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MATERIAL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_MEDIDA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MEDIDA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_MATERIAL", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID_MATERIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_MATERIAL, ID_MEDIDA, NOMBRE FROM dbo.MATERIALES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.MATERIALESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.MATERIALESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.MATERIALESDataTable dataTable = new InventariosDS.MATERIALESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS.MATERIALESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InventariosDS dataSet) {
            return this.Adapter.Update(dataSet, "MATERIALES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_MATERIAL, int Original_ID_MEDIDA, string Original_NOMBRE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_MATERIAL));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_MEDIDA));
            if ((Original_NOMBRE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_NOMBRE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_MEDIDA, string NOMBRE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_MEDIDA));
            if ((NOMBRE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NOMBRE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_MEDIDA, string NOMBRE, int Original_ID_MATERIAL, int Original_ID_MEDIDA, string Original_NOMBRE, int ID_MATERIAL) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_MEDIDA));
            if ((NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NOMBRE));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_MATERIAL));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_MEDIDA));
            if ((Original_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_NOMBRE));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID_MATERIAL));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_MEDIDA, string NOMBRE, int Original_ID_MATERIAL, int Original_ID_MEDIDA, string Original_NOMBRE) {
            return this.Update(ID_MEDIDA, NOMBRE, Original_ID_MATERIAL, Original_ID_MEDIDA, Original_NOMBRE, Original_ID_MATERIAL);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MATERIALES_UNIDADESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATERIALES_UNIDADESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MATERIALES_UNIDADES";
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            tableMapping.ColumnMappings.Add("UNIDAD", "UNIDAD");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_MATERIAL, NOMBRE, UNIDAD FROM dbo.MATERIALES_UNIDADES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.MATERIALES_UNIDADESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.MATERIALES_UNIDADESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.MATERIALES_UNIDADESDataTable dataTable = new InventariosDS.MATERIALES_UNIDADESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ONLY_MATERIAL_DISPONIBLETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ONLY_MATERIAL_DISPONIBLETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ONLY_MATERIAL_DISPONIBLE";
            tableMapping.ColumnMappings.Add("ID_MATERIAL", "ID_MATERIAL");
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE");
            tableMapping.ColumnMappings.Add("DISPONIBLES", "DISPONIBLES");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Kaikei.Properties.Settings.Default.KaikeiConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_MATERIAL, NOMBRE, DISPONIBLES FROM dbo.ONLY_MATERIAL_DISPONIBLE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InventariosDS.ONLY_MATERIAL_DISPONIBLEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InventariosDS.ONLY_MATERIAL_DISPONIBLEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InventariosDS.ONLY_MATERIAL_DISPONIBLEDataTable dataTable = new InventariosDS.ONLY_MATERIAL_DISPONIBLEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private COMPRASTableAdapter _cOMPRASTableAdapter;
        
        private DETALLE_COMPRATableAdapter _dETALLE_COMPRATableAdapter;
        
        private PROVEEDORESTableAdapter _pROVEEDORESTableAdapter;
        
        private MATERIALESTableAdapter _mATERIALESTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public COMPRASTableAdapter COMPRASTableAdapter {
            get {
                return this._cOMPRASTableAdapter;
            }
            set {
                this._cOMPRASTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DETALLE_COMPRATableAdapter DETALLE_COMPRATableAdapter {
            get {
                return this._dETALLE_COMPRATableAdapter;
            }
            set {
                this._dETALLE_COMPRATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PROVEEDORESTableAdapter PROVEEDORESTableAdapter {
            get {
                return this._pROVEEDORESTableAdapter;
            }
            set {
                this._pROVEEDORESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MATERIALESTableAdapter MATERIALESTableAdapter {
            get {
                return this._mATERIALESTableAdapter;
            }
            set {
                this._mATERIALESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cOMPRASTableAdapter != null) 
                            && (this._cOMPRASTableAdapter.Connection != null))) {
                    return this._cOMPRASTableAdapter.Connection;
                }
                if (((this._dETALLE_COMPRATableAdapter != null) 
                            && (this._dETALLE_COMPRATableAdapter.Connection != null))) {
                    return this._dETALLE_COMPRATableAdapter.Connection;
                }
                if (((this._pROVEEDORESTableAdapter != null) 
                            && (this._pROVEEDORESTableAdapter.Connection != null))) {
                    return this._pROVEEDORESTableAdapter.Connection;
                }
                if (((this._mATERIALESTableAdapter != null) 
                            && (this._mATERIALESTableAdapter.Connection != null))) {
                    return this._mATERIALESTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cOMPRASTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dETALLE_COMPRATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pROVEEDORESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mATERIALESTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(InventariosDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROVEEDORESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PROVEEDORES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pROVEEDORESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mATERIALESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MATERIALES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mATERIALESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cOMPRASTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.COMPRAS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cOMPRASTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dETALLE_COMPRATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DETALLE_COMPRA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dETALLE_COMPRATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(InventariosDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROVEEDORESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PROVEEDORES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pROVEEDORESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mATERIALESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MATERIALES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mATERIALESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cOMPRASTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.COMPRAS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cOMPRASTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dETALLE_COMPRATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DETALLE_COMPRA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dETALLE_COMPRATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(InventariosDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._dETALLE_COMPRATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DETALLE_COMPRA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dETALLE_COMPRATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cOMPRASTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.COMPRAS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cOMPRASTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mATERIALESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MATERIALES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mATERIALESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pROVEEDORESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PROVEEDORES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pROVEEDORESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(InventariosDS dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._cOMPRASTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cOMPRASTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            if (((this._dETALLE_COMPRATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dETALLE_COMPRATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            if (((this._pROVEEDORESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pROVEEDORESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            if (((this._mATERIALESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mATERIALESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda" +
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co" +
                        "n las transacciones o el estado actual no permite que comience la transacción.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cOMPRASTableAdapter != null)) {
                    revertConnections.Add(this._cOMPRASTableAdapter, this._cOMPRASTableAdapter.Connection);
                    this._cOMPRASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cOMPRASTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cOMPRASTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cOMPRASTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cOMPRASTableAdapter.Adapter);
                    }
                }
                if ((this._dETALLE_COMPRATableAdapter != null)) {
                    revertConnections.Add(this._dETALLE_COMPRATableAdapter, this._dETALLE_COMPRATableAdapter.Connection);
                    this._dETALLE_COMPRATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dETALLE_COMPRATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dETALLE_COMPRATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dETALLE_COMPRATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dETALLE_COMPRATableAdapter.Adapter);
                    }
                }
                if ((this._pROVEEDORESTableAdapter != null)) {
                    revertConnections.Add(this._pROVEEDORESTableAdapter, this._pROVEEDORESTableAdapter.Connection);
                    this._pROVEEDORESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pROVEEDORESTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pROVEEDORESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pROVEEDORESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pROVEEDORESTableAdapter.Adapter);
                    }
                }
                if ((this._mATERIALESTableAdapter != null)) {
                    revertConnections.Add(this._mATERIALESTableAdapter, this._mATERIALESTableAdapter.Connection);
                    this._mATERIALESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mATERIALESTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mATERIALESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mATERIALESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mATERIALESTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cOMPRASTableAdapter != null)) {
                    this._cOMPRASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cOMPRASTableAdapter]));
                    this._cOMPRASTableAdapter.Transaction = null;
                }
                if ((this._dETALLE_COMPRATableAdapter != null)) {
                    this._dETALLE_COMPRATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dETALLE_COMPRATableAdapter]));
                    this._dETALLE_COMPRATableAdapter.Transaction = null;
                }
                if ((this._pROVEEDORESTableAdapter != null)) {
                    this._pROVEEDORESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pROVEEDORESTableAdapter]));
                    this._pROVEEDORESTableAdapter.Transaction = null;
                }
                if ((this._mATERIALESTableAdapter != null)) {
                    this._mATERIALESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mATERIALESTableAdapter]));
                    this._mATERIALESTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591